package matrix;

/**
 * @Desc: 有效的数独
 * <p>
 * 请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 * <p>
 * 注意：
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 空白格用 '.' 表示。
 * <p>
 * <p>
 * 示例 1：
 * 输入：board =
 * [["5","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：true
 * <p>
 * 示例 2：
 * 输入：board =
 * [["8","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：false
 * 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * @Author：zhh
 * @Date：2025/3/20 14:52
 */
public class IsValidSudoku {

    public static void main(String[] args) {
        IsValidSudoku isValidSudoku = new IsValidSudoku();
        char[][] board = {
                {'.','.','.','.','5','.','.','1','.'},
                {'.','4','.','3','.','.','.','.','.'},
                {'.','.','.','.','.','3','.','.','1'},
                {'8','.','.','.','.','.','.','2','.'},
                {'.','.','2','.','7','.','.','.','.'},
                {'.','1','5','.','.','.','.','.','.'},
                {'.','.','.','.','.','2','.','.','.'},
                {'.','2','.','9','.','.','.','.','.'},
                {'.','.','4','.','.','.','.','.','.'}
        };
        boolean validSudoku = isValidSudoku.isValidSudoku(board);
        System.out.println(validSudoku);
    }

    public boolean isValidSudoku(char[][] board) {
        for (int i = 0; i < board.length; i++) {
            int[] cns = new int[9];
            for (int j = 0; j < board.length; j++) {
                char c = board[i][j];
                if(c == '.'){
                    continue;
                }
                if (cns[c - '0' - 1 ] == c - '0') {
                    return false;
                }
                cns[c - '0' -1] = c - '0';
            }
        }
        for (int i = 0; i < board.length; i++) {
            int[] cns = new int[9];
            for (int j = 0; j < board.length; j++) {
                char c = board[j][i];
                if(c == '.'){
                    continue;
                }
                if (cns[c - '0' - 1 ] == c - '0') {
                    return false;
                }
                cns[c - '0' -1] = c - '0';
            }
        }
        int[][] cns = new int[9][9];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                char c = board[i][j];
                if(c == '.'){
                    continue;
                }
                if (cns[c - '0' - 1 ][j/3 + (i/3)*3] == c - '0') {
                    return false;
                }
                cns[c - '0' -1][j/3 + (i/3)*3] = c - '0';
            }
        }


        return true;
    }

    /**
     * 遍历重复了 三次,进行优化
     *
     * 1. 用数组下标代替hash, row[i][number]++; 记录number值出现过几次,如果只有一次++后就是1。
     * 2. 一次循环可以将行,列,3*3都记录在不同的数组中
     *
     * @param board
     * @return
     */
    public boolean isValidSudoku02(char[][] board) {
        int[][] row = new int[9][9];
        int[][] col = new int[9][9];
        int[][][] box = new int[3][3][9];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                char c1 = board[i][j];
                if(c1 != '.'){
                    //字符转换成数字所对应的数组下标
                    int index = c1 - '0' - 1;
                    //记录下标出现的次数,行和列 可以在一个循环里面完成
                    row[i][index]++;
                    //行变成列,col存储每列的值
                    col[j][index]++;

                    //[j/3][i/3] 代表第几个3*3格子
                    box[j/3][i/3][index]++;

                    //次数>1代表重复
                    if(row[i][index] > 1 || col[j][index] > 1 || box[j/3][i/3][index] > 1){
                        return false;
                    }
                }
            }
        }
        return true;
    }

}
